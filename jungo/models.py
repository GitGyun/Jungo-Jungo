from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

'''
An user who trades products.
'''
class Student(User):
    student_id = models.IntegerField(primary_key=True)           # student id.
    phone_no = models.CharField(max_length=12)              # phone number.


'''
A product for trade.
Generated by user, then put into the wishlist or the selllist.
'''
class Product(models.Model):
    author = models.ForeignKey('auth.User', null=True, on_delete=True)
    pid = models.AutoField(primary_key=True)
    pname = models.CharField(max_length=16)                 # product name.
    prodtype_choice = (
        ('A','Appliances'),
        ('B','Textbooks'),
        ('C','Vehicles'),
        ('D','Others'),
        )
    prodType = models.CharField(                            # product type
        max_length=1,
        choices=prodtype_choice,
        default='A',
    )
    price = models.IntegerField()
    pdesc = models.TextField()
    pstate = models.IntegerField(default=0)
    
        

'''
A wishlist for trade.
User who wishes to buy a product put it into the wishlist.
If someone wants to sell the product, it goes to the matchlist.
'''    
class Wishlist(models.Model):
    buyer = models.ManyToManyField(Student, related_name='wishlists')           # buyer of the product.
    product = models.OneToOneField(Product, primary_key=True, on_delete=models.CASCADE)   # the product.


'''
A selllist for trade.
User who wishes to sell a product put it into the selllist.
If someone wants to buy the product, it goes to the matchlist.
'''    
class Selllist(models.Model):
    seller = models.ManyToManyField(Student, related_name='selllists')          # seller of the product.
    product = models.OneToOneField(Product, primary_key=True,
                                   on_delete=models.CASCADE)    # the product.
    

'''
A matchlist for trade.
If someone decided to trade a product in the wishlist or in the sellist,
the product and both buyer and seller put into the matchlist.
When the trade have been finished, the information is going to be deleted.
'''
class Matchlist(models.Model):
    buyer = models.ManyToManyField(Student, related_name='matchlists_buyer')    # buyer of the product.
    seller = models.ManyToManyField(Student, related_name='matchlists_seller')  # seller of the product.
    product = models.OneToOneField(Product, primary_key=True, on_delete=models.CASCADE)                   # the product.


'''
A view for user information.
'''
class Userinfo(models.Model):
    username = models.CharField(
        max_length=150,
        unique=True,
    )
    email = models.EmailField(blank=True)
    student_id = models.IntegerField(primary_key=True)
    phone_no = models.CharField(max_length=12)
    
    class Meta:
        managed = False
        db_table = 'jungo_userinfo'


'''
A view for Wishlist information.
'''
class Wishinfo(models.Model):
    username = models.CharField(
        max_length=150,
        unique=True,
    )
    pid = models.AutoField(primary_key=True)
    pname = models.CharField(max_length=16)
    price = models.IntegerField()
    prodType = models.CharField(                            # product type
        max_length=1,
        default='A',
    )   
    
    class Meta:
        managed = False
        db_table = 'jungo_wishinfo'
      

'''
A view for Selllist information.
'''
class Sellinfo(models.Model):
    username = models.CharField(
        max_length=150,
        unique=True,
    )
    pid = models.AutoField(primary_key=True)
    pname = models.CharField(max_length=16)
    price = models.IntegerField()
    prodType = models.CharField(                            # product type
        max_length=1,
        default='A',
    )
        
    class Meta:
        managed = False
        db_table = 'jungo_sellinfo'


'''
A view for Matchlist information.
'''
class Matchinfo(models.Model):
    buyername = models.CharField(
        max_length=150,
        unique=True,
    )
    sellername = models.CharField(
        max_length=150,
        unique=True,
    )
    pid = models.AutoField(primary_key=True)
    pname = models.CharField(max_length=16)
    price = models.IntegerField()
    
    class Meta:
        managed = False
        db_table = 'jungo_matchinfo'
